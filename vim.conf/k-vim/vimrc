"==========================================
" Author:  wklken
" Version: 9.1
" Email: wklken@yeah.net
" BlogPost: http://www.wklken.me
" ReadMe: README.md
" Donation: http://www.wklken.me/pages/donation.html
" Last_modify: 2015-12-15
" Sections:
"       -> Initial Plugin 加载插件
"       -> General Settings 基础设置
"       -> Display Settings 展示/排版等界面格式设置
"       -> FileEncode Settings 文件编码设置
"       -> Others 其它配置
"       -> HotKey Settings  自定义快捷键
"       -> FileType Settings  针对文件类型的设置
"       -> Theme Settings  主题设置
"
"       -> 插件配置和具体设置在vimrc.bundles中
" Note: Don't put anything in your .vimrc you don't understand!
"==========================================

"==========================================
" Initial Plugin 加载插件
"==========================================

" 修改leader键
let mapleader = ','
let g:mapleader = ','

" 开启语法高亮
syntax enable
syntax on

" install bundles
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
elseif filereadable(expand("~/.config/nvim/vimrc.bundles")) " neovim
  source ~/.config/nvim/vimrc.bundles
endif

" ensure ftdetect et al work by including this after the bundle stuff
filetype plugin indent on

" NOTE: 以下配置有详细说明，一些特性不喜欢可以直接注解掉

"==========================================
" General Settings 基础设置
"==========================================

" shell
set shell=/bin/bash

" history存储容量
set history=1024

" undo
set undofile
set undodir=/tmp

" 检测文件类型
filetype on
" 针对不同的文件类型采用不同的缩进格式
filetype indent on
" 允许插件
filetype plugin on
" 启动自动补全
filetype plugin indent on

" 文件修改之后自动载入
set autoread
" 启动的时候不显示那个援助乌干达儿童的提示
set shortmess=atI

" 备份,到另一个位置. 防止误删, 目前是取消备份
"set backup
"set backupext=.bak
"set backupdir=/tmp/vimbk/

" 取消备份。 视情况自己改
set nobackup
" 关闭交换文件
set noswapfile

" 剪贴板
set clipboard=unnamed

" TODO: remove this, use gundo
" create undo file
" if has('persistent_undo')
" " How many undos
" set undolevels=1000
" " number of lines to save for undo
" set undoreload=10000
" " So is persistent undo ...
" "set undofile
" set noundofile
" " set undodir=/tmp/vimundo/
" endif

set wildignore=*.swp,*.bak,*.pyc,*.class,.svn,.git

" 突出显示当前列
" set cursorcolumn
" 突出显示当前行
" set cursorline


" 设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制, 不需要可以去掉
" 好处：误删什么的，如果以前屏幕打开，可以找回
set t_ti= t_te=


" 鼠标暂不启用, 键盘党....
set mouse-=a
" 启用鼠标
" set mouse=a
" Hide the mouse cursor while typing
" set mousehide

" 修复ctrl+m 多光标操作选择的bug，但是改变了ctrl+v进行字符选中时将包含光标下的字符
set selection=inclusive
set selectmode=mouse,key

" change the terminal's title
set title
" 去掉输入错误的提示声音
set novisualbell
set noerrorbells
set t_vb=
set tm=500

" Remember info about open buffers on close
set viminfo^=%

" For regular expressions turn magic on
set magic

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

"==========================================
" Display Settings 展示/排版等界面格式设置
"==========================================

" 显示当前的行号列号
set ruler
" 在状态栏显示正在输入的命令
set showcmd
" 左下角显示当前vim模式
set showmode

" 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set scrolloff=7

" set winwidth=79

" 命令行（在状态行下）的高度，默认为1，这里是2
" set statusline=%<%f\ %h%m%r%=%k[%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P
"statusline
set statusline=%<%f\                                                                                                                                             
set statusline+=%w%h%m%r
set statusline+=\ [%{&ff}/%Y]
set statusline+=\ [%{getcwd()}]
set statusline+=%=%-14.(%l,%c%V%)\ %p%%
" Always show the status line - use 2 lines for the status bar
set laststatus=2

" 显示行号
set number
" 取消换行
set nowrap

" 括号配对情况, 跳转并高亮一下匹配的括号
set showmatch
" How many tenths of a second to blink when matching brackets
set matchtime=1

" 设置文内智能搜索提示
" 高亮search命中的文本
set hlsearch
" 打开增量搜索模式,随着键入即时搜索
set incsearch
" 搜索时忽略大小写
set ignorecase
" 有一个或以上大写字母时仍大小写敏感
set smartcase

" 代码折叠
set foldenable
" 折叠方法
" manual    手工折叠
" indent    使用缩进表示折叠
" expr      使用表达式定义折叠
" syntax    使用语法定义折叠
" diff      对没有更改的文本进行折叠
" marker    使用标记进行折叠, 默认标记是 {{{ 和 }}}
set foldmethod=indent
set foldlevel=99
nnoremap <space> za

" 缩进配置
" Smart indent
set smartindent
" 打开自动缩进
" never add copyindent, case error   " copy the previous indentation on autoindenting
set autoindent

" tab相关变更
" 设置Tab键的宽度        [等同的空格个数]
set tabstop=4
" 每一次缩进对应的空格数
set shiftwidth=4
" 按退格键时可以一次删掉 4 个空格
set softtabstop=4
" insert tabs on the start of a line according to shiftwidth, not tabstop 按退格键时可以一次删掉 4 个空格
set smarttab
" 将Tab自动转化成空格[需要输入真正的Tab键时，使用 Ctrl+V + Tab]
set expandtab
" 缩进时，取整 use multiple of shiftwidth when indenting with '<' and '>'
set shiftround

" A buffer becomes hidden when it is abandoned
set hidden
set wildmode=list:longest
set ttyfast

" 00x增减数字时使用十进制
set nrformats=

" 相对行号: 行号变成相对，可以用 nj/nk 进行跳转
" set relativenumber number
" au FocusLost * :set norelativenumber number
" au FocusGained * :set relativenumber
" " 插入模式下用绝对行号, 普通模式下用相对
"  autocmd InsertEnter * :set norelativenumber number
"  autocmd InsertLeave * :set relativenumber
"  function! NumberToggle()
"  if(&relativenumber == 1)
"  set norelativenumber number
"  else
"  set relativenumber
"  endif
"  endfunc
" nnoremap <C-n> :call NumberToggle()<cr>

"==========================================
" FileEncode Settings 文件编码,格式
"==========================================
" 设置新文件的编码为 UTF-8
set encoding=utf-8
" 自动判断编码时，依次尝试以下编码：
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set helplang=cn
"set langmenu=zh_CN.UTF-8
"set enc=2byte-gb18030
" 下面这句只影响普通模式 (非图形界面) 下的 Vim
set termencoding=utf-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" 如遇Unicode值大于255的文本，不必等到空格再折行
set formatoptions+=m
" 合并两行中文时，不在中间加空格
set formatoptions+=B


"==========================================
" others 其它设置
"==========================================
" vimrc文件修改之后自动加载, windows
autocmd! bufwritepost _vimrc source %
" vimrc文件修改之后自动加载, linux
autocmd! bufwritepost .vimrc source %

" 自动补全配置
" 让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
set completeopt=longest,menu

" 增强模式中的命令行自动完成操作
set wildmenu
" Ignore compiled files
set wildignore=*.o,*~,*.pyc,*.class

" 离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" 回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"

" In the quickfix window, <CR> is used to jump to the error under the
" cursor, so undefine the mapping there.
autocmd BufReadPost quickfix nnoremap <buffer> <CR> <CR>
" quickfix window  s/v to open in split window,  ,gd/,jd => quickfix window => open it
autocmd BufReadPost quickfix nnoremap <buffer> v <C-w><Enter><C-w>L
autocmd BufReadPost quickfix nnoremap <buffer> s <C-w><Enter><C-w>K

" command-line window
autocmd CmdwinEnter * nnoremap <buffer> <CR> <CR>

" 打开自动定位到最后编辑的位置, 需要确认 .viminfo 当前用户可写
if has("autocmd")
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"==========================================
" HotKey Settings  自定义快捷键设置
"==========================================

" F1 - F6 设置

" F1 行号开关，用于鼠标复制代码用
" 为方便复制，用<F1>开启/关闭行号显示:
function! HideNumber()
if(&relativenumber == &number)
set relativenumber! number!
elseif(&number)
set number!
else
set relativenumber!
endif
set number?
endfunc
nnoremap <F1> :call HideNumber()<CR>

set pastetoggle=<F2>

" disbale paste mode when leaving insert mode
au InsertLeave * set nopaste

" F5 set paste问题已解决, 粘贴代码前不需要按F5了
" F5 粘贴模式paste_mode开关,用于有格式的代码粘贴
" Automatically set paste mode in Vim when pasting in insert mode
function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction
inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" 分屏窗口移动, Smart way to move between windows
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" http://stackoverflow.com/questions/13194428/is-better-way-to-zoom-windows-in-vim-than-zoomwin
" Zoom / Restore window.
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <Leader>z :ZoomToggle<CR>


" Go to home and end using capitalized directions
noremap H ^
noremap L $


" Map ; to : and save a million keystrokes 用于快速进入命令行
nnoremap ; :


" 命令行模式增强，ctrl - a到行首， -e 到行尾
cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>


" 搜索相关
" 进入搜索Use sane regexes"
nnoremap / /\v
vnoremap / /\v

" Keep search pattern at the center of the screen.
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" 去掉搜索高亮
noremap <silent><leader>/ :nohls<CR>

" switch # *
nnoremap # *
nnoremap * #

" for # indent, python文件中输入新行时#号注释不切回行首
autocmd BufNewFile,BufRead *.py inoremap # X<c-h>#

" tab/buffer相关

" 使用方向键切换buffer
nnoremap <leader><TAB> :bn<CR>

" tab 操作
" http://vim.wikia.com/wiki/Alternative_tab_navigation
" http://stackoverflow.com/questions/2005214/switching-to-a-particular-tab-in-vim

" tab切换
nnoremap <TAB> gt

" normal模式下切换到确切的tab
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

" 新建tab  Ctrl+t
nnoremap <C-t>     :tabnew<CR>
inoremap <C-t>     <Esc>:tabnew<CR>

" => 选中及操作改键

" 调整缩进后自动选中，方便再次操作
vnoremap < <gv
vnoremap > >gv

" y$ -> Y Make Y behave like other capitals
map Y y$

" 复制选中区到系统剪切板中
vnoremap <leader>y "+y

" select all
map <Leader>sa ggVG

" 选中并高亮最后一次插入的内容
nnoremap gv `[v`]

" select block
nnoremap <leader>v V`}

" Quickly save the current file
nnoremap <leader>w :w<CR>

" Quickly close the current window
nnoremap <leader>q :q<CR>

" kj 替换 Esc
inoremap kj <Esc>
vnoremap kj <Esc>

" 滚动Speed up scrolling of the viewport slightly
nnoremap <C-e> 2<C-e>
nnoremap <C-y> 2<C-y>

" remap U to <C-r> for easier redo
nnoremap U <C-r>

"==========================================
" FileType Settings  文件类型设置
"==========================================

" 具体编辑文件类型的一般设置，比如不要 tab 等
autocmd BufRead,BufNewFile *.py,*.py.* set filetype=python
autocmd BufRead,BufNewFile *.sh,*.sh.* set filetype=sh
autocmd BufRead,BufNewFile *.go,*.golang,*.go.*,*.golang.* set filetype=go
autocmd BufRead,BufNewFile *.md,*.mkd,*.markdown,*.mdown set filetype=markdown
autocmd BufRead,BufNewFile *.md.*,*.mkd.*,*.markdown.*,*.mdown.* set filetype=markdown
autocmd BufRead,BufNewFile Dockerfile,dockerfile,Dockerfile.*,dockerfile.* set filetype=Dockerfile
autocmd BufRead,BufNewFile *.yaml,*.yaml.*,*.yml,*.yml.* set filetype=ansible.yaml
autocmd BufRead,BufNewFile *.json,*.json.* set filetype=json
autocmd BufRead,BufNewFile *.part set filetype=html
autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript tabstop=2 shiftwidth=2 softtabstop=2 expandtab ai

autocmd FileType json,sh,python,go set tabstop=4 shiftwidth=4 expandtab ai
autocmd FileType ruby,javascript,html,css,xml,markdown,ansible,yaml set tabstop=2 shiftwidth=2 softtabstop=2 expandtab ai

" 保存文件时删除多余空格
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd FileType sh,c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yaml,perl autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" 定义函数AddTitle，自动插入文件头
autocmd BufNewFile *.sh,*.py,*.go exec ":silent! call AddTitle()"
func! AddTitle()
  if &filetype == 'python'
    call append(0,"#!/usr/bin/env python")
    call append(1,"# -*- coding: utf-8 -*-")
    call append(2,"")
    call append(3,"# Author        : Tony Bian <biantonghe@gmail.com>")
    call append(4,"# Last Modified : ".strftime("%Y-%m-%d %H:%M"))
    call append(5,"# Filename      : ".expand("%:t"))
  elseif &filetype == 'sh'
    call append(0,"#!/bin/bash")
    call append(1,"")
    call append(2,"# Author        : Tony Bian <biantonghe@gmail.com>")
    call append(3,"# Last Modified : ".strftime("%Y-%m-%d %H:%M"))
    call append(4,"# Filename      : ".expand("%:t"))
  elseif &filetype == 'go'
    call append(0,"// Author        : Tony Bian <biantonghe@gmail.com>")
    call append(1,"// Last Modified : ".strftime("%Y-%m-%d %H:%M"))
    call append(2,"// Filename      : ".expand("%:t"))
  endif
  echohl WarningMsg | echo "Successful in adding the copyright." | echohl None
endfunction

nnoremap <leader>a:silent! call AddTitle()<cr>

autocmd BufWritePre,FileWritePre *.sh,*.py,*.go exec ":call UpdateTitle()"
func! UpdateTitle()
  let n = 1
  while n < 10
    let line = getline(n)
    if line=~'^[#/|]* Last Modified :.*$'
      normal m'
      exec '/ Last Modified :/s@:.*$@\=": ".strftime("%Y-%m-%d %H:%M")@'
      normal ''
      normal mk
      exec '/ Filename      :/s@:.*$@\=": ".expand("%:t")@'
      normal 'k
      return
    endif
    let n = n + 1
  endwhile 
endfunction

" 设置可以高亮的关键字
if has("autocmd")
  " Highlight TODO, FIXME, NOTE, etc.
  if v:version > 701
    autocmd Syntax * call matchadd('Todo',  '\W\zs\(TODO\|FIXME\|CHANGED\|DONE\|XXX\|BUG\|HACK\)')
    autocmd Syntax * call matchadd('Debug', '\W\zs\(NOTE\|INFO\|IDEA\|NOTICE\)')
  endif
endif

"==========================================
" Theme Settings  主题设置
"==========================================

" theme主题
set cc=120
set background=dark
set t_Co=256

colorscheme solarized

" 设置标记一列的背景颜色和数字一行颜色一致
" hi! link SignColumn   LineNr
" hi! link ShowMarksHLl DiffAdd
" hi! link ShowMarksHLu DiffChange
highlight clear SignColumn
highlight clear LineNr

" for error highlight，防止错误整行标红导致看不清
" highlight clear SpellBad
" highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
" highlight clear SpellCap
" highlight SpellCap term=underline cterm=underline
" highlight clear SpellRare
" highlight SpellRare term=underline cterm=underline
" highlight clear SpellLocal
" highlight SpellLocal term=underline cterm=underline

" terminal inside
if has('nvim')
  fu! OpenTerminal()
   " open split windows on the topleft
   vsplit
   " resize the height of terminal windows to 30
   :terminal
  endf
else
  fu! OpenTerminal()
   " open split windows on the topleft
   vsplit
   " resize the height of terminal windows to 30
   :call term_start('bash', {'curwin' : 1, 'term_finish' : 'close'})
  endf
endif
nnoremap tm :call OpenTerminal()<cr>

" Quickly Run use <F5>
map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
  exec "w"
if &filetype == 'sh'
  exec "!bash -c 'time bash %'"
elseif &filetype == 'python'
  exec "!bash -c 'time python %'"
elseif &filetype == 'go'
  exec "!go build %"
  exec "!bash -c 'time go run %'"
elseif &filetype == 'html'
  exec "!export DISPLAY=localhost:10.0 && firefox % &"
elseif &filetype == 'markdown'
  exec "!~/.vim/markdown.pl % > %.html &"
  exec "!export DISPLAY=localhost:10.0 && firefox %.html &"
endif
  endfunc

" python
au BufNewFile,BufRead *.py
\ call PyVirtualEnv() |
\ nnoremap <leader>b ofrom pudb import set_trace<CR>set_trace()  # Break Point<Esc> |
\ nnoremap <leader>m o"""<CR><CR>"""<UP>
 
" python with virtualenv support 
func! PyVirtualEnv()
if has('python') 
py << EOF 
import os 
import sys 
import vim 
if 'VIRTUAL_ENV' in os.environ: 
    project_base_dir = os.environ['VIRTUAL_ENV'] 
    sys.path.insert(0, os.path.join(project_base_dir, 'lib', 'python%s' % os.environ['PY'], 'site-packages')) 
EOF 
endif 
 
if has('python3') 
py3 << EOF 
import os 
import sys 
import vim 
if 'VIRTUAL_ENV' in os.environ: 
    project_base_dir = os.environ['VIRTUAL_ENV'] 
    sys.path.insert(0, os.path.join(project_base_dir, 'lib', 'python%s' % os.environ['PY'], 'site-packages')) 
EOF 
endif
  endfunc
